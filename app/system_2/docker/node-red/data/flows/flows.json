[
    {
        "id": "main_flow_tab",
        "type": "tab",
        "label": "Sensor Data TCP Flow",
        "disabled": false,
        "info": ""
    },
    {
        "id": "inject_single_sensor",
        "type": "inject",
        "z": "main_flow_tab",
        "name": "Single Sensor Data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "generate_single_sensor"
            ]
        ]
    },
    {
        "id": "inject_batch_sensor",
        "type": "inject",
        "z": "main_flow_tab",
        "name": "Batch Sensor Data",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "generate_single_sensor",
        "type": "function",
        "z": "main_flow_tab",
        "name": "Generate Single Sensor",
        "func": "const sensorTypes = ['TEMPERATURE', 'HUMIDITY'];\nconst units = {\n    'TEMPERATURE': '°C',\n    'HUMIDITY': '%',\n};\n\nconst sensorType = sensorTypes[Math.floor(Math.random() * sensorTypes.length)];\nconst sensorId = `sensor_${Math.floor(Math.random() * 100).toString().padStart(3, '0')}`;\n\nlet value;\nswitch(sensorType) {\n    case 'TEMPERATURE':\n        value = Math.round((Math.random() * 40 - 10) * 100) / 100; // -10 to 30°C\n        break;\n    case 'HUMIDITY':\n        value = Math.round(Math.random() * 100 * 100) / 100; // 0-100%\n        break;\n}\n\nconst sensorData = {\n    sensorId: sensorId,\n    type: sensorType,\n    value: value,\n    unit: units[sensorType],\n    timestamp: new Date().toISOString()\n};\n\nmsg.payload = sensorData;\nmsg.flowType = 0x53; // Single sensor flow type\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 100,
        "wires": [
            [
                "format_tcp_message"
            ]
        ]
    },
    {
        "id": "format_tcp_message",
        "type": "function",
        "z": "main_flow_tab",
        "name": "Format TCP Sensor Message",
        "func": "// Convert payload to JSON string\nconst jsonPayload = JSON.stringify(msg.payload);\nconst jsonBuffer = Buffer.from(jsonPayload, 'utf8');\n\n// Create header with flow type and length\nconst flowType = msg.flowType || 0x53;\nconst messageLength = jsonBuffer.length;\n\n// Create the complete message buffer\n// Flow type (1 byte) + Length (4 bytes, big endian) + JSON payload\nconst headerBuffer = Buffer.allocUnsafe(5);\nheaderBuffer.writeUInt8(flowType, 0);           // Flow type\nheaderBuffer.writeUInt32BE(messageLength, 1);   // Message length\n\n// Combine header and payload\nconst completeMessage = Buffer.concat([headerBuffer, jsonBuffer]);\n\nmsg.payload = completeMessage;\nmsg.topic = 'sensor-data';\n\n// Add debug info\nmsg.debug = {\n    flowType: flowType,\n    messageLength: messageLength,\n    totalLength: completeMessage.length,\n    originalPayload: JSON.parse(jsonPayload)\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 150,
        "wires": [
            [
                "tcp_out",
                "debug_output"
            ]
        ]
    },
    {
        "id": "tcp_out",
        "type": "tcp out",
        "z": "main_flow_tab",
        "name": "TCP to Sensor Processor",
        "host": "host.docker.internal",
        "port": "9999",
        "beserver": "client",
        "base64": false,
        "end": false,
        "x": 820,
        "y": 120,
        "wires": []
    },
    {
        "id": "debug_output",
        "type": "debug",
        "z": "main_flow_tab",
        "name": "Debug TCP Message",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "debug",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 180,
        "wires": []
    },
    {
        "id": "manual_test_inject",
        "type": "inject",
        "z": "main_flow_tab",
        "name": "Manual Test",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"sensorId\":\"test_001\",\"type\":\"TEMPERATURE\",\"value\":23.5,\"unit\":\"°C\",\"timestamp\":\"2025-06-17T10:30:00.000Z\"}",
        "payloadType": "json",
        "x": 130,
        "y": 300,
        "wires": [
            [
                "manual_format"
            ]
        ]
    },
    {
        "id": "manual_format",
        "type": "function",
        "z": "main_flow_tab",
        "name": "Manual Format",
        "func": "// For manual testing with predefined data\nmsg.flowType = 0x53; // Single sensor\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 300,
        "wires": [
            [
                "format_tcp_message"
            ]
        ]
    },
    {
        "id": "tcp_status",
        "type": "status",
        "z": "main_flow_tab",
        "name": "TCP Connection Status",
        "scope": [
            "tcp_out"
        ],
        "x": 150,
        "y": 400,
        "wires": [
            [
                "debug_status"
            ]
        ]
    },
    {
        "id": "debug_status",
        "type": "debug",
        "z": "main_flow_tab",
        "name": "Connection Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 400,
        "wires": []
    },
    {
        "id": "inject_price_data",
        "type": "inject",
        "z": "main_flow_tab",
        "name": "Price Data Inject",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "15",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 260,
        "wires": [
            [
                "generate_price_data"
            ]
        ]
    },
    {
        "id": "generate_price_data",
        "type": "function",
        "z": "main_flow_tab",
        "name": "Generate Price Data",
        "func": "const now = new Date();\nconst startTimestamp = new Date(now.getTime() - 15 * 60 * 1000); // 15 minutes ago\nconst endTimestamp = now;\n\nconst totalCost = Math.round(Math.random() * 100 * 100) / 100; // 0-100 EUR\nconst priceInEurPerKwh = Math.round(Math.random() * 0.5 * 1000) / 1000; // 0-0.5 EUR/kWh\n\nconst priceData = {\n    startTimestamp: startTimestamp.toISOString(),\n    endTimestamp: endTimestamp.toISOString(),\n    totalCost: totalCost,\n    priceInEurPerKwh: priceInEurPerKwh,\n    startTimeFormatted: startTimestamp.toISOString().slice(11, 16), // HH:mm\n    endTimeFormatted: endTimestamp.toISOString().slice(11, 16), // HH:mm\n    metadata: {\n        source: \"node-red\",\n        unit: \"EUR/kWh\"\n    }\n};\n\nmsg.payload = priceData;\nmsg.flowType = 0x50; // 'P' for price flow\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 260,
        "wires": [
            [
                "format_tcp_price_message"
            ]
        ]
    },
    {
        "id": "format_tcp_price_message",
        "type": "function",
        "z": "main_flow_tab",
        "name": "Format TCP Price Message",
        "func": "// Convert payload to JSON string\nconst jsonPayload = JSON.stringify(msg.payload);\nconst jsonBuffer = Buffer.from(jsonPayload, 'utf8');\n\n// Create header with flow type and length\nconst flowType = msg.flowType || 0x50; // default to 'P'\nconst messageLength = jsonBuffer.length;\n\n// Flow type (1 byte) + Length (4 bytes, big endian) + JSON payload\nconst headerBuffer = Buffer.allocUnsafe(5);\nheaderBuffer.writeUInt8(flowType, 0);\nheaderBuffer.writeUInt32BE(messageLength, 1);\n\n// Combine header and payload\nconst completeMessage = Buffer.concat([headerBuffer, jsonBuffer]);\n\nmsg.payload = completeMessage;\nmsg.topic = 'price-data';\n\nmsg.debug = {\n    flowType: flowType,\n    messageLength: messageLength,\n    totalLength: completeMessage.length,\n    originalPayload: JSON.parse(jsonPayload)\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 260,
        "wires": [
            [
                "tcp_out"
            ]
        ]
    }
]
